{"version":3,"sources":["lib/BridgeManager.js","lib/components/LocalEditor.js","App.js","serviceWorker.js","index.js"],"names":["BridgeManager","this","updateObservers","initiateBridge","instance","callback","observer","push","note","componentManager","ComponentManager","name","streamContextItem","item","notifyObserversOfUpdate","streamItems","items","filter","isMetadataUpdate","saveItemWithPresave","YoutubeEmbed","videoId","props","attrs","matches","src","React","Component","LocalEditor","onChange","debounce","value","text","state","content","setState","get","save","addUpdateObserver","getNote","refresh","uuid","updateMarkdown","markdown","placeholder","autoFocus","bind","embeds","title","keywords","icon","width","height","matcher","url","match","component","App","className","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UAEqBA,E,WASnB,aAAe,oBACbC,KAAKC,gBAAkB,GACvBD,KAAKE,iB,uDALL,OADqB,MAAjBF,KAAKG,WAAoBH,KAAKG,SAAW,IAAIJ,GAC1CC,KAAKG,a,uDAQIC,GAChB,IAAIC,EAAW,CAAED,SAAUA,GAE3B,OADAJ,KAAKC,gBAAgBK,KAAKD,GACnBA,I,gDAGkB,IAAD,gBACHL,KAAKC,iBADF,IACxB,2BAA2C,SAChCG,YAFa,iC,gCAOxB,OAAOJ,KAAKO,O,uCAGI,IAAD,OAQfP,KAAKQ,iBAAmB,IAAIC,IAPV,CAChB,CACEC,KAAM,yBAKgD,eAI1DV,KAAKQ,iBAAiBG,mBAAkB,SAACC,GACvC,EAAKL,KAAOK,EACZ,EAAKC,6BAGPb,KAAKQ,iBAAiBM,YAAY,CAAC,eAAgB,WAAY,iBAAiB,SAACC,GAC/E,EAAKA,MAAQA,EAAMC,QAAO,SAACJ,GAAU,OAAQA,EAAKK,yB,6BAI9C,IAAD,OACL,GAAIjB,KAAKO,KAAM,CAIb,IAAIA,EAAOP,KAAKO,KAChBP,KAAKQ,iBAAiBU,oBAAoBX,GAAM,WAC9CA,EAAO,EAAKA,a,KA3DCR,EAGZI,SAAW,K,ICCdgB,E,uKACM,IAEFC,EADYpB,KAAKqB,MAAfC,MACcC,QAAQ,GAE9B,OACE,4BACEC,IAAG,wCAAmCJ,EAAnC,2B,GAPgBK,IAAMC,WAaZC,E,kDACnB,WAAYN,GAAO,IAAD,8BAChB,cAAMA,IAuBRO,SAAWC,oBAAS,SAACC,GACnB,IAAMC,EAAOD,IACTvB,EAAO,EAAKyB,MAAMzB,KACtBA,EAAK0B,QAAQF,KAAOA,EACpB,EAAKG,SAAS,CAAE3B,KAAMA,IACtBR,EAAcoC,MAAMC,UA3BpB,EAAKJ,MAAQ,GAFG,E,gEAKG,IAAD,OAClBjC,EAAcoC,MAAME,mBAAkB,WACpC,IAAM9B,EAAOR,EAAcoC,MAAMG,UAC3BC,GAAW,EAAKP,MAAMzB,MACtB,EAAKyB,MAAMzB,MAAQ,EAAKyB,MAAMzB,KAAKiC,MAAQjC,EAAKiC,KACtD,EAAKN,SAAS,CACZ3B,KAAMR,EAAcoC,MAAMG,YAExBC,GACF,EAAKE,sB,uCAMT,IAAIC,EAAW1C,KAAKgC,MAAMzB,KAAK0B,QAAQF,KACvC/B,KAAKkC,SAAS,CAAEQ,e,wCAYhB,OAAI1C,KAAKgC,MAAMzB,KACNP,KAAKgC,MAAMzB,KAAK0B,QAAQF,KAE1B,K,+BAIP,OACE,6BACE,kBAAC,IAAD,CACED,MAAQ9B,KAAKgC,MAAMU,SACnBC,YAAY,GACZC,WAAS,EACThB,SAAW5B,KAAK4B,SAASiB,KAAK7C,MAC9B8C,OAAQ,CACN,CACEC,MAAO,UACPC,SAAU,4BACVC,KAAM,kBACJ,yBACEzB,IAAI,mGACJ0B,MAAO,GACPC,OAAQ,MAGZC,QAAS,SAAAC,GACP,OAAOA,EAAIC,MACT,4GAGJC,UAAWpC,W,GAhEgBM,IAAMC,WCPhC8B,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASP,MACvB,2DCZNQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c2ef8d15.chunk.js","sourcesContent":["import ComponentManager from 'sn-components-api';\n\nexport default class BridgeManager {\n\n  /* Singleton */\n  static instance = null;\n  static get() {\n    if (this.instance == null) { this.instance = new BridgeManager(); }\n    return this.instance;\n  }\n\n  constructor() {\n    this.updateObservers = [];\n    this.initiateBridge();\n  }\n\n  addUpdateObserver(callback) {\n    let observer = { callback: callback };\n    this.updateObservers.push(observer);\n    return observer;\n  }\n\n  notifyObserversOfUpdate() {\n    for (var observer of this.updateObservers) {\n      observer.callback();\n    }\n  }\n\n  getNote() {\n    return this.note;\n  }\n\n  initiateBridge() {\n    var permissions = [\n      {\n        name: \"stream-context-item\"\n        // name: \"stream-items\"\n      }\n    ]\n\n    this.componentManager = new ComponentManager(permissions, function () {\n      // on ready\n    });\n\n    this.componentManager.streamContextItem((item) => {\n      this.note = item;\n      this.notifyObserversOfUpdate();\n    })\n\n    this.componentManager.streamItems([\"SN|Component\", \"SN|Theme\", \"SF|Extension\"], (items) => {\n      this.items = items.filter((item) => {return !item.isMetadataUpdate});\n    });\n  }\n\n  save() {\n    if (this.note) {\n      // Be sure to capture this object as a variable, as this.note may be reassigned in `streamContextItem`, so by the time\n      // you modify it in the presave block, it may not be the same object anymore, so the presave values will not be applied to\n      // the right object, and it will save incorrectly.\n      let note = this.note;\n      this.componentManager.saveItemWithPresave(note, () => {\n        note = this.note ;\n      });\n    }\n  }\n\n}","import React from 'react';\nimport { debounce } from \"lodash\";\nimport RichMarkdownEditor from \"rich-markdown-editor\";\nimport BridgeManager from \"../BridgeManager\";\n\n\nclass YoutubeEmbed extends React.Component {\n  render() {\n    const { attrs } = this.props;\n    const videoId = attrs.matches[1];\n\n    return (\n      <iframe\n        src={`https://www.youtube.com/embed/${videoId}?modestbranding=1`}\n      />\n    );\n  }\n}\n\nexport default class LocalEditor extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    BridgeManager.get().addUpdateObserver(() => {\n      const note = BridgeManager.get().getNote();\n      const refresh = !this.state.note\n        || (this.state.note && this.state.note.uuid != note.uuid);\n      this.setState({\n        note: BridgeManager.get().getNote(),\n      });\n      if (refresh) {\n        this.updateMarkdown();\n      }\n    });\n  }\n\n  updateMarkdown() {\n    let markdown = this.state.note.content.text;\n    this.setState({ markdown });\n  }\n\n  onChange = debounce((value) => {\n    const text = value();\n    let note = this.state.note;\n    note.content.text = text;\n    this.setState({ note: note });\n    BridgeManager.get().save();\n  })\n\n  getNoteContents() {\n    if (this.state.note) {\n      return this.state.note.content.text;\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <div>\n        <RichMarkdownEditor\n          value={ this.state.markdown }\n          placeholder=\"\"\n          autoFocus\n          onChange={ this.onChange.bind(this) }\n          embeds={[\n            {\n              title: \"YouTube\",\n              keywords: \"youtube video tube google\",\n              icon: () => (\n                <img\n                  src=\"https://upload.wikimedia.org/wikipedia/commons/7/75/YouTube_social_white_squircle_%282017%29.svg\"\n                  width={24}\n                  height={24}\n                />\n              ),\n              matcher: url => {\n                return url.match(\n                  /(?:https?:\\/\\/)?(?:www\\.)?youtu\\.?be(?:\\.com)?\\/?.*(?:watch|embed)?(?:.*v=|v\\/|\\/)([a-zA-Z0-9_-]{11})$/i\n                );\n              },\n              component: YoutubeEmbed,\n            },\n          ]}\n        />\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './app.scss';\nimport LocalEditor from './lib/components/LocalEditor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LocalEditor/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}